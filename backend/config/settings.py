"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 3.2.12.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

from pathlib import Path
import os
import environ
from datetime import timedelta

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Init environ
env = environ.Env()
environ.Env.read_env(os.path.join(BASE_DIR, 'enviroment.env'))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-4or=gtku=swre#ez+vak1wbkm+)qz-^ik&r&$2@l_o-(cuebqh'

# SECURITY WARNING: don't run with debug turned on in production!

DEBUG = env.bool('DEBUG', default=True)

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # API
    'rest_framework',

    # CORS -> is a Django application for handling the server headers required for Cross-Origin Resource Sharing (CORS)
    "corsheaders",

    # WEB_APPS
    'catalogos',
    'etl',
    'tableros',
    'triage',
    'users',

]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',

    'whitenoise.middleware.WhiteNoiseMiddleware',

    'django.contrib.sessions.middleware.SessionMiddleware',
    "corsheaders.middleware.CorsMiddleware",
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR.parent, 'build'), os.path.join(BASE_DIR, "templates")],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'


AUTH_USER_MODEL = 'users.Usuario'



# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

if env.str('SERVER_PLATFORM') == 'local':

    CORS_ALLOW_ALL_ORIGINS = True

    from sshtunnel import SSHTunnelForwarder

    ssh_tunnel = SSHTunnelForwarder(
        (env.str('SERVER_IP'), env.int('SSH_PORT')), # Remote server IP and SSH port
        ssh_username=env.str('SSH_USERNAME'), # SSH_USERNAME
        ssh_password=env.str('SSH_PASSWORD'),
        remote_bind_address=(env.str('DB_HOST'), env.int('DB_PORT')) # ('localhost', LOCAL_DB_PORT_ON_THE_SERVER)
    )
    ssh_tunnel.start()

    DATABASES = {
        'defaults': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        },
        'default': {
            'ENGINE': 'django.db.backends.postgresql_psycopg2',
            'NAME': env.str('DB_NAME'), # REMOTE_DB_DB_NAME
            'USER': env.str('DB_USERNAME'), # REMOTE_DB_USERNAME
            'PASSWORD': env.str('DB_PASSWORD'), # REMOTE_DB_PASSWORD
            'HOST': env.str('DB_HOST'), # 'localhost'
            'PORT': ssh_tunnel.local_bind_port, # ssh_tunnel.local_bind_port,
            'OPTIONS': {
                'options': '-c search_path=public,dashboards,general,triage'
            },
        }
    }

else:
    DATABASES = {
        'defaults': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        },
        'default': {
            'ENGINE': 'django.db.backends.postgresql_psycopg2',
            'NAME': env.str('DB_NAME'), # os.environ.get('DB_NAME'),
            'USER': env.str('DB_USERNAME'), # os.environ.get('DB_USER'),
            'PASSWORD': env.str('DB_PASSWORD'), # os.environ.get('DB_PASSWORD'),
            'HOST': env.str('DB_HOST'), # os.environ.get('DB_HOST'),
            'PORT': env.int('DB_PORT'), # int(os.environ.get('DB_PORT')),
            'OPTIONS': {
                'options': '-c search_path=dashboards,general,public,triage'
            },
        }
    }


# https://www.django-rest-framework.org/api-guide/renderers/
# https://www.django-rest-framework.org/api-guide/parsers/
REST_FRAMEWORK = {
    'DEFAULT_RENDERER_CLASSES': (
        'rest_framework.renderers.JSONRenderer',
        # 'rest_framework.renderers.BrowsableAPIRenderer',
    ),
    'DEFAULT_PARSER_CLASSES': [
        'rest_framework.parsers.JSONParser',
    ],
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.TokenAuthentication',
    ]
}


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'es-mx'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = False

USE_TZ = True


DATETIME_FORMAT = 'd/m/Y, P'
DATE_FORMAT = 'd/m/Y'


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATIC_URL = '/static/'
STATICFILES_DIRS = [os.path.join(BASE_DIR.parent, 'build', 'static')]

STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# Configure Email
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_USE_TLS = True
EMAIL_PORT = 587
EMAIL_HOST_USER = env.str('EMAIL') # os.environ.get('EMAIL')
EMAIL_HOST_PASSWORD = env.str('EMAIL_PASS') # os.environ.get('EMAIL_PASS')


SESSION_EXPIRE_AT_BROWSER_CLOSE = True
SESSION_EXPIRE_AFTER_LAST_ACTIVITY = True
SESSION_COOKIE_AGE = 60 * 30
SESSION_EXPIRE_SECONDS = 60 * 30


TIME_TOKEN_EXPIRATION = timedelta(hours=4)
TIME_TOKEN_DELAY = timedelta(minutes=10)
